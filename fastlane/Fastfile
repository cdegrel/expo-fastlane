require 'json'

# --- CONSTS ---

PROJECT_ROOT = File.expand_path("..", Dir.pwd)
CUSTOMERS_DIR = File.join(PROJECT_ROOT, "customers")

ANDROID_DIR = File.join(PROJECT_ROOT, "android")
APP_DIR = File.join(ANDROID_DIR, "app")
BUILD_OUTPUT = File.join(APP_DIR, "build/outputs/bundle/release")
AAB_PATH = File.join(BUILD_OUTPUT, "app-release.aab")

IOS_DIR = File.join(PROJECT_ROOT, "ios")
IOS_XCODEPROJ_PATH = File.join(IOS_DIR, "expofastlane.xcodeproj")
IOS_WORKSPACE = "project.xcworkspace"
IOS_SCHEME = "AppName"

# --- HELPERS ---

def current_customer(options)
  customer = options[:customer] || ENV["CUSTOMER"]
  UI.user_error!("‚ùå 'customer' must be specified either as option or env var!") unless customer
  customer
end

def package_name_for(customer)
#   "com.#{customer}.pubgenapp"
    "io.promoscore.app"
end

def validate_customer(customer)
  customer_path = File.join(CUSTOMERS_DIR, customer)
  UI.success("‚úÖ Customer folder exists: #{CUSTOMERS_DIR}")
  UI.user_error!("‚ùå Customer folder does not exist: #{customer_path}") unless File.directory?(customer_path)
end

def prepare_app(customer:, platform:)
  UI.header("üöß Running Expo prebuild for customer #{customer} on #{platform}")
  Dir.chdir(PROJECT_ROOT) do
    sh("CUSTOMER=#{customer} bunx expo prebuild --platform #{platform}")
  end
end

# --- HOOKS ---

before_all do |lane, options|
  validate_customer(current_customer(options))
end

# --- PLATFORM: ANDROID ---

platform :android do
  desc "[Android] Prepare"
  lane :prepare do |options|
    customer = current_customer(options)
    prepare_app(customer: customer, platform: "android")
  end

  desc "[Android] Version"
  lane :version do |options|
    customer = current_customer(options)

    # UI.header("üîß Incrementing version code")
    # current_version_code = google_play_track_version_codes(
    #   package_name: package_name_for(customer),
    #   json_key: ENV["GOOGLE_PLAY_SERVICE_ACCOUNT"]
    # )[0]
    # version_code = current_version_code + 1

    UI.success("PWD #{Dir.pwd}")
    UI.success("GOOGLE_PLAY_SERVICE_ACCOUNT #{ENV["GOOGLE_PLAY_SERVICE_ACCOUNT"]}")


    # UI.message("üî¢ Android version code will be set from #{current_version_code} to #{version_code}")
    increment_version_code(
        gradle_file_path: File.join(APP_DIR, "build.gradle"),
        version_code: 1,
    )
  end

  desc "[Android] Clean"
  lane :clean do |_options|
    UI.header("üßπ Cleaning Gradle project")
    gradle(task: "clean", project_dir: ANDROID_DIR)
  end

  desc "[Android] Build"
  lane :build do |_options|
    UI.success("‚úÖ Starting Android build...")
    UI.success("üìÇ Android project directory: #{ANDROID_DIR}")
    UI.success("üìÇ Android AAB output path: #{AAB_PATH}")
    UI.success("üîë Ensure environment variables are set for keystore: KEYSTORE_FILE #{ENV["KEYSTORE_FILE"]}, KEYSTORE_PASSWORD #{ENV["KEYSTORE_PASSWORD"]}, KEYSTORE_KEY_ALIAS #{ENV["KEYSTORE_KEY_ALIAS"]}, KEYSTORE_KEY_PASSWORD #{ENV["KEYSTORE_KEY_PASSWORD"]}")
    UI.header("üî® Building Android AAB")


    # gradle(
    #   task: "bundle",
    #   build_type: "release",
    #   project_dir: ANDROID_DIR,
    #   properties: {
    #     "android.injected.signing.store.file" => ENV["KEYSTORE_FILE"],
    #     "android.injected.signing.store.password" => ENV["KEYSTORE_PASSWORD"],
    #     "android.injected.signing.key.alias" => ENV["KEYSTORE_KEY_ALIAS"],
    #     "android.injected.signing.key.password" => ENV["KEYSTORE_KEY_PASSWORD"],
    #   }
    # )

    UI.user_error!("‚ùå AAB not found at #{AAB_PATH}") unless File.exist?(AAB_PATH)
    UI.success("‚úÖ Android build successful: #{AAB_PATH}")
  end

  desc "[Android] Submit"
  lane :submit do |options|
    customer = current_customer(options)

    UI.user_error!("‚ùå AAB not found. Run `fastlane android build` first.") unless File.exist?(AAB_PATH)

    UI.header("üöÄ Uploading to Google Play (production)")
    upload_to_play_store(
      aab: AAB_PATH,
      package_name: package_name_for(customer),
      track: "production",
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )
    UI.success("‚úÖ Android app uploaded for customer #{customer}")
  end

  desc "[Android] Release"
  lane :release do |options|
    prepare(options)
    version(options)
    # clean(options)
    build(options)
    # submit(options)
  end
end

# --- PLATFORM: IOS ---

# platform :ios do
#   desc "[iOS] Prepare"
#   lane :prepare do |options|
#     customer = current_customer(options)
#     prepare_app(customer: customer, platform: "ios")
#   end

#   desc "[iOS] Version"
#   lane :version do |options|
#     customer = current_customer(options)

#     api_key = app_store_connect_api_key(
#       key_id: ENV["APP_STORE_KEY_ID"],
#       issuer_id: ENV["APP_STORE_ISSUER_ID"],
#       key_filepath: "#{Dir.pwd}/#{ENV["APP_STORE_KEY_FILE"]}",
#       duration: 1200
#     )

#     UI.header("üîß Incrementing version code")
#     current_build_number = app_store_build_number(api_key: api_key, app_identifier: package_name_for(customer), live: false)
#     build_number = current_build_number + 1

#     UI.message("üî¢ Setting iOS build number from #{current_build_number} to #{build_number}")
#     increment_build_number(
#       xcodeproj: IOS_XCODEPROJ_PATH,
#       build_number: build_number
#     )
#   end

#   desc "[iOS] Clean"
#   lane :clean do |_options|
#     UI.message("üßπ No clean needed for iOS (optional)")
#   end

#   desc "[iOS] Build"
#   lane :build do |options|
#     customer = current_customer(options)

#     match(
#       type: "appstore",
#       readonly: false,
#       app_identifier: package_name_for(customer),
#       username: ENV["APP_STORE_USERNAME"],
#       team_id: ENV["APP_STORE_CONNECT_TEAM_ID"]
#     )

#     build_app(
#       workspace: IOS_WORKSPACE,
#       scheme: IOS_SCHEME,
#       export_method: "app-store",
#       export_options: {
#         provisioningProfiles: {
#           package_name_for(customer) => ENV['APPLE_PROFILE_NAME']
#         }
#       }
#     )
#   end

#   desc "[iOS] Submit"
#   lane :submit do |options|
#     customer = current_customer(options)
#     ipa_path = Actions.lane_context[SharedValues::IPA_OUTPUT_PATH]

#     UI.user_error!("‚ùå IPA file not found. Run `fastlane ios build` first.") unless ipa_path && File.exist?(ipa_path)

#     UI.header("üöÄ Uploading IPA to App Store Connect")
#     upload_to_app_store(
#       ipa: ipa_path,
#       app_identifier: package_name_for(customer),
#       skip_metadata: true,
#       skip_screenshots: true,
#       skip_app_version_update: true
#     )

#     UI.success("‚úÖ iOS app uploaded for customer #{customer}")
#   end

#   desc "[iOS] Release"
#   lane :release do |options|
#     prepare(options)
#     version(options)
#     clean(options)
#     # build(options)
#     # submit(options)
#   end
# end
